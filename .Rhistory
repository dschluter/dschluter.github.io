theme_classic()
z2$rotation[,1:2]
# 1. Download the file and read into a data frame in R. Inspect the data frame to get a sense of which species are abundant and which are rare, which are widely distributed and which occur infrequently. The first column of this data frame will have the site variable. Make sure not to include the site variable from the correspondence analysis. Also, the plots will use the row names of the data frame as the site names. If you want to see the actual site names rather than row numbers in your plots, rename the row names accordingly.
x <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/rodent.csv"),
stringsAsFactors = FALSE)
head(x)
x
# 1. Download the file and read into a data frame in R. Inspect the data frame to get a sense of which species are abundant and which are rare, which are widely distributed and which occur infrequently. The first column of this data frame will have the site variable. Make sure not to include the site variable from the correspondence analysis. Also, the plots will use the row names of the data frame as the site names. If you want to see the actual site names rather than row numbers in your plots, rename the row names accordingly.
x <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/rodent.csv"),
stringsAsFactors = FALSE)
x
# 1. Download and inspect
x <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/rodent.csv"),
stringsAsFactors = FALSE)
rownames(x) <- x$site
x$site <- NULL
x
x <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/rodent.csv"),
stringsAsFactors = FALSE)
rownames(x) <- x$site
x
# 2. Carry out a correspondence analysis using these data. Extract two axes from the species abundance data at sites. How strongly are the site and species data correlated along the two axes?
z <- corresp(x[,-1], nf = 2)
names(z)
# 3. Plot the results from (2). Overlap of points may make it difficult to identify some plots and species (unfortunately there's no built-in "jitter" option for this plot). You can use the species scores to help identify them.
biplot(z, las = 1, xlab = "First axis", ylab = "Second axis")
z$cor
ggbiplot(z)
# 4. Use the plot in (3) and the species (column) scores to interpret the results of your analysis. How are each of the species contributing to the correspondence axes? Do you notice any differences between the invasive and native species in their distributions?
z$cscore
# 5. As you probably surmised, the results of the first round of analysis were chiefly driven by the introduced species. To examine the native species as well, create a new data frame with <i>Rattus</i> and <i>Mus</i> deleted. This will generate some sites with no species present. Delete these sites from the new data frame.
x1 <- x[, -c(2,3)]
head(x1)
apply(x1[, -1], 1, sum)
# 5. As you probably surmised, the results of the first round of analysis were chiefly driven by the introduced species. To examine the native species as well, create a new data frame with <i>Rattus</i> and <i>Mus</i> deleted. This will generate some sites with no species present. Delete these sites from the new data frame.
x1 <- x[ , -c(2,3)]
rowsums(x1)
# 5. As you probably surmised, the results of the first round of analysis were chiefly driven by the introduced species. To examine the native species as well, create a new data frame with <i>Rattus</i> and <i>Mus</i> deleted. This will generate some sites with no species present. Delete these sites from the new data frame.
x1 <- x[ , -c(2,3)]
rowsum(x1)
?rowsum
?rowSums
# 5. As you probably surmised, the results of the first round of analysis were chiefly driven by the introduced species. To examine the native species as well, create a new data frame with <i>Rattus</i> and <i>Mus</i> deleted. This will generate some sites with no species present. Delete these sites from the new data frame.
x1 <- x[ , -c(2,3)]
rowSums(x1)
head(x1)
# 5. As you probably surmised, the results of the first round of analysis were chiefly driven by the introduced species. To examine the native species as well, create a new data frame with <i>Rattus</i> and <i>Mus</i> deleted. This will generate some sites with no species present. Delete these sites from the new data frame.
x1 <- x[ , -c(2,3)]
rowSums(x1[, -1])
# 5. As you probably surmised, the results of the first round of analysis were chiefly driven by the introduced species. To examine the native species as well, create a new data frame with <i>Rattus</i> and <i>Mus</i> deleted. This will generate some sites with no species present. Delete these sites from the new data frame.
x1 <- x[ , -c(2,3)]
rowSums(x1[, -1]) > 0
# 5. As you probably surmised, the results of the first round of analysis were chiefly driven by the introduced species. To examine the native species as well, create a new data frame with <i>Rattus</i> and <i>Mus</i> deleted. This will generate some sites with no species present. Delete these sites from the new data frame.
x1 <- x[ , -c(2,3)]
x1 <- x1[rowSums(x1[, -1]) > 0, ]
head(x1)
# 6. Carry out a correspondence analysis on the native species. Extract two axes from the species abundance data at sites. How strongly are the species and site data correlated?
z1 <- corresp(x1[, -1], nf = 2)
names(z)
z$cor
# 6. Correspondence analysis on native species
z1 <- corresp(x1[, -1], nf = 2)
z$cor
# 7. Plot the results from your analysis in (6). Is the plot useful in helping you to identify which species tend to co-occur? And which species tend not to occur together? Confirm this by looking at the original data. Are your interpretations correct?
biplot(z1, las = 1, xlab = "First axis", ylab = "Second axis")
x1
# 6. Correspondence analysis on native species
z1 <- corresp(x1[, -1], nf = 2)
z1$cor
# 9. Order species and sites according to position along the first axis
x1[,-1][order(z1$rscore[,1]), order(z1$cscore[,1])]
# 9. Order species and sites according to position along the first axis
x2 <- x1[, -1][order(z1$rscore[,1]), order(z1$cscore[,1])]
# 9. Order species and sites according to position along the first axis
x2 <- x1[, -1][order(z1$rscore[,1]), order(z1$cscore[,1])]
x2
# 1. Read the <i>Anolis</i> data set into memory once again. Drop the species classified as having a "Unique" ecomorph from the data frame. If your ecomorph variable is a factor, make sure that "Unique" has also been dropped from the factor levels for this variable.
anolis <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/Anolis.convergence.csv"),
stringsAsFactors = FALSE)
anolis <- anolis[anolis$Ecomorph != "Unique", ]
# 1. Read the <i>Anolis</i> data set into memory once again. Drop the species classified as having a "Unique" ecomorph from the data frame. If your ecomorph variable is a factor, make sure that "Unique" has also been dropped from the factor levels for this variable.
anolis <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/Anolis.convergence.csv"),
stringsAsFactors = FALSE)
anolis <- anolis[anolis$Ecomorph != "Unique", ]
head(anolis)
head(anolis)
# 2. Discriminant function analysis
z <- lda(Ecomorph ~., data = anolis[, 3:14])
# 3. Plot the first two discriminant functions, using different symbols for different ecomorphs. How much separation between groups is evident? How does it compare with the separation observed between the ecomorphs on the principal component axes, which is blind to the groupings?
pairs(z, abbrev=1, col = as.integer(factor(anolis$Ecomorph)))
plot(z)
z
names(z)
z$xlevels
z$scaling
# 3. Plot the first two discriminant functions, using different symbols for different ecomorphs. How much separation between groups is evident? How does it compare with the separation observed between the ecomorphs on the principal component axes, which is blind to the groupings?
predict(z)
str(x)
str(anolis)
# 3. Plot the first two discriminant functions, using different symbols for different ecomorphs. How much separation between groups is evident? How does it compare with the separation observed between the ecomorphs on the principal component axes, which is blind to the groupings?
predict(z)$x
predict(z)$x[, 1:2]
# 3. Plot the first two discriminant functions, using different symbols for different ecomorphs. How much separation between groups is evident? How does it compare with the separation observed between the ecomorphs on the principal component axes, which is blind to the groupings?
anolis[, c("df1","df2")] <- predict(z)$x[, 1:2]
# 3. Plot the first two discriminant functions, using different symbols for different ecomorphs. How much separation between groups is evident? How does it compare with the separation observed between the ecomorphs on the principal component axes, which is blind to the groupings?
anolis[, c("df1","df2")] <- predict(z)$x[, 1:2]
ggplot(anolis, aes(df1, df2, colour = Ecomorph, symbol = Ecomorph)) +
geom_point(size = 2) +
theme_classic() +
theme(legend.position="top")
# 4. On the basis of the plot, and your interpretation of the eigenvectors of the discriminant functions, what traits maximally discriminate different <i>Anolis</i> ecomorphs?
z$scaling
predict(z)
# 5. Reclassify the species used in the calculation of the discriminant functions to ecomorphs. Compare the classification with the true ecomorphs in a table. How successful was the classification?
(Note that the mis-classification is expected to be unrealistically low when carried out on the same individuals used to calculate the discriminant function. Typically, half the data would be used to generate the discriminant function, and classification success would be evaluated using the other half).
z1 <- predict(z)
# 3. Plot first two discriminant functions
predict.anolis <- predict(z)
anolis[, c("df1","df2")] <- predict.anolis$x[, 1:2]
ggplot(anolis, aes(df1, df2, colour = Ecomorph, symbol = Ecomorph)) +
geom_point(size = 2) +
theme_classic() +
theme(legend.position="top")
names(predict.anolis)
# 5. Reclassify
table(predict.anolis$class, anolis$Ecomorph)
```{r eval = TRUE}
suppressPackageStartupMessages(library(ape))
suppressPackageStartupMessages(library(phytools))
# 1. Download tree file
rtree <- read.tree(url("https://www.zoology.ubc.ca/~bio501/R/data/rockfish.phy"))
rtree
# 2. Plot phylogeny
plot(rtree, cex = 0.4)
# 2. Plot phylogeny
plot(rtree, cex = 0.6)
# 3. Input species measurements
rockfish <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/rockfish.csv"),
stringsAsFactors = FALSE)
# 3. Input species measurements
rockfish <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/rockfish.csv"),
stringsAsFactors = FALSE)
rownames(rockfish) <- rockfish$species
rockfish <- rockfish[ match(rtree$tip.label, rownames(rockfish)), ]
# 4. Which of the traits show strong phylogenetic signal? First, use a method that places dots at the tips of the tree, with dot size reflecting the value for the trait. Is there a tendency for closely related species to be more similar in their trait values than more distantly related species?
x <- rockfish[, c("maxlength.cm", "maxage.y", "maxdepth.m")]
head(x)
dotTree(rtree, as.matrix(x)[,1])
dotTree(rtree, as.matrix(x)[,c("maxlength.cm")], cex = 0.6)
dotTree(rtree, as.matrix(x)[,c("maxlength.cm")], cex = 0.5)
dotTree(rtree, as.matrix(x)[,2])
dotTree(rtree, as.matrix(x)[,c("maxlength.cm")], cex = 0.5)
dotTree(rtree, as.matrix(x)[,c("maxage.y")], cex = 0.5)
dotTree(rtree, as.matrix(x)[,c("maxdepth.m")], cex = 0.5)
plotTree.wBars(rtree, as.matrix(x)[,2], scale = 0.001)
# 5. Pagel's $\lambda$
phylosig(rtree, as.matrix(x)[,c("maxlength.cm")], method = "lambda")
phylosig(rtree, as.matrix(x)[,c("maxage.y")], method = "lambda")
phylosig(rtree, as.matrix(x)[,c("maxdepth.m")], method = "lambda")
# 1. Inspect scatter plots of the species data. Make any necessary transformations here to help meet the assumptions of linear models*.
pairs(rockfish[, c("maxlength.cm", "maxage.y", "maxdepth.m")])
# 1. Inspect scatter plots of the species data. Make any necessary transformations here to help meet the assumptions of linear models*.
pairs(log(rockfish[, c("maxlength.cm", "maxage.y", "maxdepth.m")]))
rockfish$log.maxlength <- log(rockfish$maxlength.cm)
rockfish$log.maxage <- log(rockfish$maxage.y)
rockfish$log.maxdepth <- log(rockfish$maxdepth.m)
# 2. Choose one pair of variables in the data set to compare (suitably transformed). Carry out a linear model fit ignoring phylogeny for now.
z <- lm(log.maxage ~ log.maxlength, data = rockfish)
# 2. Choose one pair of variables in the data set to compare (suitably transformed). Carry out a linear model fit ignoring phylogeny for now.
z <- lm(log.maxage ~ log.maxlength, data = rockfish)
summary(z)
# 3. Examine the diagnostic plots in (2) to check your assumptions.
plot(z)
# 5. Obtain the correlation coefficient between the variables used in (2). Take note of the value of the estimate.
cor(log.maxage, log.maxlength)
# 5. Obtain the correlation coefficient between the variables used in (2). Take note of the value of the estimate.
cor(rockfish$log.maxage, rockfish$log.maxlength)
rockfish$contrast.log.maxlength <- pic(rockfish$log.maxlength), rtree)
rockfish$contrast.log.maxlength <- pic(rockfish$log.maxlength, rtree)
contrast.log.maxlength <- pic(rockfish$log.maxlength, rtree)
contrast.log.maxage <- pic(rockfish$log.maxage, rtree)
plot(contrast.log.maxage ~ contrast.log.maxlength)
quartz()
# 3. Diagnostic plots
plot(z)
class(rtree)
plot.phylo
clip()
reset_par <- function(){
op <- structure(list(xlog = FALSE, ylog = FALSE, adj = 0.5, ann = TRUE,
ask = FALSE, bg = "transparent", bty = "o", cex = 1, cex.axis = 1,
cex.lab = 1, cex.main = 1.2, cex.sub = 1, col = "black",
col.axis = "black", col.lab = "black", col.main = "black",
col.sub = "black", crt = 0, err = 0L, family = "", fg = "black",
fig = c(0, 1, 0, 1), fin = c(6.99999895833333, 6.99999895833333
), font = 1L, font.axis = 1L, font.lab = 1L, font.main = 2L,
font.sub = 1L, lab = c(5L, 5L, 7L), las = 0L, lend = "round",
lheight = 1, ljoin = "round", lmitre = 10, lty = "solid",
lwd = 1, mai = c(1.02, 0.82, 0.82, 0.42), mar = c(5.1, 4.1,
4.1, 2.1), mex = 1, mfcol = c(1L, 1L), mfg = c(1L, 1L, 1L,
1L), mfrow = c(1L, 1L), mgp = c(3, 1, 0), mkh = 0.001, new = FALSE,
oma = c(0, 0, 0, 0), omd = c(0, 1, 0, 1), omi = c(0, 0, 0,
0), pch = 1L, pin = c(5.75999895833333, 5.15999895833333),
plt = c(0.117142874574832, 0.939999991071427, 0.145714307397962,
0.882857125425167), ps = 12L, pty = "m", smo = 1, srt = 0,
tck = NA_real_, tcl = -0.5, usr = c(0.568, 1.432, 0.568,
1.432), xaxp = c(0.6, 1.4, 4), xaxs = "r", xaxt = "s", xpd = FALSE,
yaxp = c(0.6, 1.4, 4), yaxs = "r", yaxt = "s", ylbias = 0.2), .Names = c("xlog",
"ylog", "adj", "ann", "ask", "bg", "bty", "cex", "cex.axis",
"cex.lab", "cex.main", "cex.sub", "col", "col.axis", "col.lab",
"col.main", "col.sub", "crt", "err", "family", "fg", "fig", "fin",
"font", "font.axis", "font.lab", "font.main", "font.sub", "lab",
"las", "lend", "lheight", "ljoin", "lmitre", "lty", "lwd", "mai",
"mar", "mex", "mfcol", "mfg", "mfrow", "mgp", "mkh", "new", "oma",
"omd", "omi", "pch", "pin", "plt", "ps", "pty", "smo", "srt",
"tck", "tcl", "usr", "xaxp", "xaxs", "xaxt", "xpd", "yaxp", "yaxs",
"yaxt", "ylbias"))
par(op)
}
# 3. Diagnostic plots
plot(z)
old.par <- par()
old.par <- par()
plot(rtree, cex = 0.6)
suppressPackageStartupMessages(library(ape))
suppressPackageStartupMessages(library(phytools))
# 1. Download tree file
rtree <- read.tree(url("https://www.zoology.ubc.ca/~bio501/R/data/rockfish.phy"))
rtree
# 2. Plot phylogeny
old.par <- par()
plot(rtree, cex = 0.6)
rockfish <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/rockfish.csv"),
stringsAsFactors = FALSE)
rownames(rockfish) <- rockfish$species
rockfish <- rockfish[ match(rtree$tip.label, rownames(rockfish)), ]
# 4. Plot traits
x <- rockfish[, c("maxlength.cm", "maxage.y", "maxdepth.m")]
dotTree(rtree, as.matrix(x)[,c("maxlength.cm")], cex = 0.5)
dotTree(rtree, as.matrix(x)[,c("maxage.y")], cex = 0.5)
dotTree(rtree, as.matrix(x)[,c("maxdepth.m")], cex = 0.5)
# 5. Pagel's $\lambda$
phylosig(rtree, as.matrix(x)[,c("maxlength.cm")], method = "lambda")
phylosig(rtree, as.matrix(x)[,c("maxage.y")], method = "lambda")
phylosig(rtree, as.matrix(x)[,c("maxdepth.m")], method = "lambda")
pairs(rockfish[, c("maxlength.cm", "maxage.y", "maxdepth.m")])
pairs(log(rockfish[, c("maxlength.cm", "maxage.y", "maxdepth.m")]))
rockfish$log.maxlength <- log(rockfish$maxlength.cm)
rockfish$log.maxage <- log(rockfish$maxage.y)
rockfish$log.maxdepth <- log(rockfish$maxdepth.m)
# 2. Linear model
z <- lm(log.maxage ~ log.maxlength, data = rockfish)
# 3. Diagnostic plots
plot(z)
# 3. Diagnostic plots
par(old.par)
plot(z)
par(old.par)
# 2. Inspect and transform
pairs(rockfish[, c("maxlength.cm", "maxage.y", "maxdepth.m")])
pairs(log(rockfish[, c("maxlength.cm", "maxage.y", "maxdepth.m")]))
rockfish$log.maxlength <- log(rockfish$maxlength.cm)
rockfish$log.maxage <- log(rockfish$maxage.y)
rockfish$log.maxdepth <- log(rockfish$maxdepth.m)
# 3. Linear model
z <- lm(log.maxage ~ log.maxlength, data = rockfish)
# 4. Diagnostic plots
plot(z)
# 5. Estimates
summary(z)
# 6. Correlation
cor(rockfish$log.maxage, rockfish$log.maxlength)
contrast.log.maxlength <- pic(rockfish$log.maxlength, rtree)
contrast.log.maxage <- pic(rockfish$log.maxage, rtree)
plot(contrast.log.maxage ~ contrast.log.maxlength)
# 2. Fit a linear model to the independent contrasts you created in (1). Use the contrasts corresponding to the same response and explanatory variables as in your TIPS analysis. Examine the diagnostic plots to check the linear model assumptions.
z1 <- lm(contrast.log.maxage ~ contrast.log.maxlength - 1)
summary(z1)
plot(z1)
# 3. Extract the regression coefficients and standard errors from the model object created in (2). How does the slope* compare with that obtained in your TIPS analysis? Is the standard error from the PICs analysis greater than, less than, or the same as in your TIPS analysis? (Meta-analyses have often found that PICs yield a similar answer to an analysis that ignores phylogeny, but your specific case might or might not.)
summary(z1)
# 3. Linear model
z <- lm(log.maxage ~ log.maxlength, data = rockfish)
# 5. Estimates
summary(z)
# 4. Correlation
sum(contrast.log.maxlength*contrast.log.maxage) /
(sqrt(sum(contrast.log.maxlength^2))*sqrt(sum(contrast.log.maxage^2)))
search()
```{r eval = TRUE}
suppressPackageStartupMessages(library(nlme))
# 1. GLS
z <- gls(log.maxage ~ log.maxlength, data= rockfish, correlation=corBrownian(1, rtree))
# 1. GLS
z2 <- gls(log.maxage ~ log.maxlength, data= rockfish, correlation=corBrownian(1, rtree))
summary(z2)
# 3. Linear model
z <- lm(log.maxage ~ log.maxlength, data = rockfish)
# 5. Estimate
summary(z)
summary(z1)
# 3. Linear model
z <- lm(log.maxage ~ log.maxlength, data = rockfish)
# 5. Estimate
summary(z)
summary(z2)
summary(z1)
# 2. Examine the residual plot from the model fit in (1). Notice that the mean of the residuals is not zero (calculate the mean of the residuals to confirm this). This is because the GLS analysis does not weight each of the observations equally.
plot(z2)
names(z2)
mean(residuals(z2))
# 1. Pagel's lambda to help decide this. Using GLS, fit your model again while fixing Pagel's $\lambda$ = 1. Refit, but this time using  $\lambda$ = 0. Which fit has the higher log-likelihood? How large is the difference in their AIC scores?
z3 <- gls(y ~ x, data=mydata, correlation=corPagel(1,mytree, fixed = TRUE))
z4 <- gls(y ~ x, data=mydata, correlation=corPagel(0,mytree, fixed = TRUE))
z3 <- gls(log.maxage ~ log.maxlength, data= rockfish,
correlation=corPagel(1,rtree, fixed = TRUE))
# 1. Pagel's lambda to help decide this. Using GLS, fit your model again while fixing Pagel's $\lambda$ = 1. Refit, but this time using  $\lambda$ = 0. Which fit has the higher log-likelihood? How large is the difference in their AIC scores?
z3 <- gls(log.maxage ~ log.maxlength, data= rockfish,
correlation=corPagel(1,rtree, fixed = TRUE))
z4 <- gls(log.maxage ~ log.maxlength, data= rockfish,
correlation=corPagel(0,rtree, fixed = TRUE))
# 1. Pagel's lambda to help decide this. Using GLS, fit your model again while fixing Pagel's $\lambda$ = 1. Refit, but this time using  $\lambda$ = 0. Which fit has the higher log-likelihood? How large is the difference in their AIC scores?
z3 <- gls(log.maxage ~ log.maxlength, data= rockfish,
correlation=corPagel(1,rtree, fixed = TRUE))
z4 <- gls(log.maxage ~ log.maxlength, data= rockfish,
correlation=corPagel(0,rtree, fixed = TRUE))
AIC(z3, z4)
# 2. ML estimate of lambda
z5 <- gls(log.maxage ~ log.maxlength, data= rockfish,
correlation=corPagel(1,rtree, fixed = FALSE))
# 2. ML estimate of lambda
z5 <- gls(log.maxage ~ log.maxlength, data= rockfish,
correlation=corPagel(1,rtree, fixed = FALSE))
AIC(z5)
summary(z5)
z6 <- gls(log.maxdepth ~ log.maxlength, data= rockfish,
correlation=corPagel(1,rtree, fixed = TRUE))
z7 <- gls(log.maxdepth ~ log.maxlength, data= rockfish,
correlation=corPagel(0,rtree, fixed = TRUE))
z8 <- gls(log.maxdepth ~ log.maxlength, data= rockfish,
correlation=corPagel(1,rtree, fixed = FALSE))
# 3. Repeat the analyses with the other pairs of variables to decide whether including phylogeny generally improves the fit of linear models to these data.
z6 <- gls(log.maxdepth ~ log.maxlength, data= rockfish,
correlation=corPagel(1,rtree, fixed = TRUE))
z7 <- gls(log.maxdepth ~ log.maxlength, data= rockfish,
correlation=corPagel(0,rtree, fixed = TRUE))
z8 <- gls(log.maxdepth ~ log.maxlength, data= rockfish,
correlation=corPagel(1,rtree, fixed = FALSE))
AIC(z6, z7, z8)
summary(z8)
AIC(z6, z7, z8)
suppressPackageStartupMessages(library(ape))
suppressPackageStartupMessages(library(phytools))
# 1. Download tree file
rtree <- read.tree(url("https://www.zoology.ubc.ca/~bio501/R/data/rockfish.phy"))
rtree
# 2. Save default graphical parameters
old.par <- par()
# 2. Save default graphical parameters
old.par <- par()
```{r eval = TRUE, fig.width = 7, fig.height = 7}
# 3. Plot phylogeny
plot(rtree, cex = 0.6)
# 3. Plot phylogeny
plot(rtree, cex = 0.6)
# 4. Input species measurements
rockfish <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/rockfish.csv"),
stringsAsFactors = FALSE)
rownames(rockfish) <- rockfish$species
rockfish <- rockfish[ match(rtree$tip.label, rownames(rockfish)), ]
# 5. Plot traits
x <- rockfish[, c("maxlength.cm", "maxage.y", "maxdepth.m")]
dotTree(rtree, as.matrix(x)[,c("maxlength.cm")], cex = 0.5)
dotTree(rtree, as.matrix(x)[,c("maxage.y")], cex = 0.5)
dotTree(rtree, as.matrix(x)[,c("maxdepth.m")], cex = 0.5)
# 6. Pagel's $\lambda$
phylosig(rtree, as.matrix(x)[,c("maxlength.cm")], method = "lambda")
phylosig(rtree, as.matrix(x)[,c("maxage.y")], method = "lambda")
phylosig(rtree, as.matrix(x)[,c("maxdepth.m")], method = "lambda")
# Restore graphical parameters
suppressWarnings(par(old.par))
# 2. Inspect and transform
pairs(rockfish[, c("maxlength.cm", "maxage.y", "maxdepth.m")])
pairs(log(rockfish[, c("maxlength.cm", "maxage.y", "maxdepth.m")]))
rockfish$log.maxlength <- log(rockfish$maxlength.cm)
rockfish$log.maxage <- log(rockfish$maxage.y)
rockfish$log.maxdepth <- log(rockfish$maxdepth.m)
# 3. Linear model
z <- lm(log.maxage ~ log.maxlength, data = rockfish)
# 4. Diagnostic plots
plot(z)
# 6. Correlation
cor(rockfish$log.maxage, rockfish$log.maxlength)
suppressPackageStartupMessages(library(nlme))
# 1. GLS
z2 <- gls(log.maxage ~ log.maxlength, data= rockfish, correlation=corBrownian(1, rtree))
summary(z2)
# 2. Residual plot
plot(z2)
x <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/kluane.csv"),
stringsAsFactors = FALSE)
x$treatment <- factor(x$treatment,levels=c("control","exclosure","fertilizer","both"))
ggplot(data = x, aes(y = log(phen.ach), x = treatment, fill = duration, color = duration)) +
geom_point(size = 3, position = position_dodge(width = 0.7)) +
labs(x = "Treatment", y = "log phenolics concentration") +
theme_classic()
library(ggplot2)
library(visreg, warn.conflicts=FALSE)
library(lmerTest, warn.conflicts=FALSE)
library(ggplot2, warn.conflicts=FALSE)
library(emmeans, warn.conflicts=FALSE)
ggplot(data = x, aes(y = log(phen.ach), x = treatment, fill = duration, color = duration)) +
geom_point(size = 3, position = position_dodge(width = 0.7)) +
labs(x = "Treatment", y = "log phenolics concentration") +
theme_classic()
ggplot(data = x, aes(y = log(phen.ach), x = duration, fill = duration, color = duration)) +
geom_line(aes(group = plot), col = "black") +
geom_point(size = 3, position = position_dodge(width = 0.7), show.legend = FALSE) +
facet_wrap(~ treatment, nrow = 1) +
labs(x = "Treatment", y = "log phenolics concentration") +
theme(aspect.ratio = 2)+
theme_classic()
z <- lmer(log(phen.ach) ~ treatment + duration + (1|plot), data=x)
visreg(z, xvar = "treatment", by = "duration", overlay = TRUE,
ylab="Log phenolics concentration")
z.int <- lmer(log(phen.ach) ~ treatment * duration + (1|plot), data=x)
visreg(z.int, xvar = "treatment", by = "duration", overlay = TRUE,
ylab="Log phenolics concentration")
visreg(z, xvar = "treatment", by = "duration", overlay = TRUE,
ylab="Log phenolics concentration", data = x)
### Answers
All lines below beginning with double hashes are R output
```{r eval = TRUE}
# Input the data:
x <- c(0.9, 1.4, 1.2, 1.2, 1.3, 2.0, 1.4, 1.6)
# Histogram
hist(x, right = FALSE, col = "firebrick", main = "")
# Convert hertz to radians/sec
z <- x * 2*pi
z
# Convert hertz to radians/sec
z <- x * 2*pi
z
# Mean without using mean() function
sum(z)/length(z)
# Using mean()
mean(z)
# Standard deviation without sd() or var()
sqrt( sum( (z - mean(z))^2 )/( length(z) - 1) )
# Compare with output of sd()
sd(z)
# Median
median(z)
# SE
sd(z)/sqrt(length(z))
```
[//]: #  -->
z <- c(z, NA)
# mean() with NA in vector, use na.rm=TRUE argument
mean(z, na.rm = TRUE)
n <- length(z)
sd(z, na.rm = TRUE)/sqrt(n)
n <- length(na.omit(z))
sd(z, na.rm = TRUE)/sqrt(n)
library(dplyr, warn.conflicts = FALSE)
library(readr, warn.conflicts = FALSE)
# Read the data (this is a shortcut)
mydata <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/anolis.csv"))
# See variable types
str(mydata)
# dplyr command instead
glimpse(mydata)
is.factor(mydata$Island)
class(mydata$Island)
head(mydata)
tail(mydata)
# Frequency table of ecomorphs
table(mydata$Ecomorph)
# Typo present
which(mydata$Ecomorph == "Trunk-Crown ")
# Repair
mydata$Ecomorph[mydata$Ecomorph == "Trunk-Crown "] <- "Trunk-Crown"
# Make frequency table again
table(mydata$Ecomorph)
# Re-read data with options
mydata <- read.csv(url("https://www.zoology.ubc.ca/~bio501/R/data/anolis.csv"),
strip.white = TRUE, na.strings = c("NA",""), stringsAsFactors = FALSE)
# or use read_csv() function from readr package
mydata <- read_csv(url("https://www.zoology.ubc.ca/~bio501/R/data/anolis.csv"))
# Variable types
str(mydata) # or use dplyr command "glimpse(mydata)"
# Number of species in each Ecomorph category
table(mydata$Ecomorph)
# Same, but include a tally of missing values too
#   (missing here means the species doesn't fall into an ecomorph series)
table(mydata$Ecomorph, useNA = "ifany")
length(mydata$Species[mydata$Island == "Jamaica"])
length(mydata$Species[mydata$Island == "Jamaica"])
length(mydata$Species[mydata$Island == "Jamaica"])
nrow(mydata[mydata$Island == "Jamaica",])
length(mydata$Species[mydata$Island == "Jamaica"])
length(mydata$Species[grep("Cuba", mydata$Island)])
z <- mydata[mydata$Island %in% c("Cuba", "Jamaica", "Hispaniola", "Puerto Rico"), ]
table(z$Island, z$Ecomorph)
# One solution is to create a new variable indicating species occurrence on big islands
mydata$bigIsland <- rep(NA, nrow(mydata)) # create the new variable
mydata$bigIsland[grep("Cuba", mydata$Island)] <- "Cuba"
mydata$bigIsland[grep("Jamaica", mydata$Island)] <- "Jamaica"
mydata$bigIsland[grep("Hispaniola", mydata$Island)] <- "Hispaniola"
mydata$bigIsland[grep("Puerto Rico", mydata$Island)] <- "Puerto Rico"
# Finally:
table(mydata$bigIsland, mydata$Ecomorph)
